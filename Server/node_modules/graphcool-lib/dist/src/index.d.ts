import { GraphQLClient } from 'graphql-request';
import { FunctionEvent, GraphcoolOptions, ScalarObject, APIOptions, APIEndpoint } from './types';
export default class Graphcool {
    projectId: string;
    pat?: string;
    serverEndpoint: string;
    constructor(projectId: string, options?: GraphcoolOptions);
    api(endpoint: APIEndpoint, options?: APIOptions): GraphQLClient;
    generateAuthToken(nodeId: string, typeName: string, payload?: ScalarObject): Promise<string>;
    validateToken(token: string): Promise<boolean>;
    checkPermissionQuery(query: string, variables?: any): Promise<boolean>;
    updateAll(typeName: string, filter?: {
        [key: string]: any;
    }): Promise<any>;
    deleteAll(typeName: string, filter?: {
        [key: string]: any;
    }): Promise<any>;
    uploadFile(typeName: string, buffer: any): Promise<any>;
    private systemClient();
    private checkPatIsSet(fn);
    private tokenOrPat(options?);
}
export declare function fromEvent(event: FunctionEvent, options?: GraphcoolOptions): Graphcool;
