"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_request_1 = require("graphql-request");
class Graphcool {
    constructor(projectId, options) {
        const mergedOptions = Object.assign({ serverEndpoint: 'https://api.graph.cool', pat: undefined }, options);
        this.projectId = projectId;
        this.pat = mergedOptions.pat;
        this.serverEndpoint = mergedOptions.serverEndpoint.replace(/\/$/, '');
    }
    api(endpoint, options) {
        const url = `${this.serverEndpoint}/${endpoint}/${this.projectId}`;
        const token = this.tokenOrPat(options);
        if (token) {
            return new graphql_request_1.GraphQLClient(url, {
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });
        }
        else {
            return new graphql_request_1.GraphQLClient(url);
        }
    }
    generateAuthToken(nodeId, typeName, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            this.checkPatIsSet('generateAuthToken');
            const request = `
      mutation {
        generateUserToken(input:{
          pat:"${this.pat}", 
          projectId:"${this.projectId}", 
          userId:"${nodeId}", 
          modelName:"${typeName}", 
          clientMutationId:"static"
        })
        {
          token
        }
      }`;
            const result = yield this.systemClient().request(request);
            return result['generateUserToken']['token'];
        });
    }
    validateToken(token) {
        return __awaiter(this, void 0, void 0, function* () {
            return false;
        });
    }
    checkPermissionQuery(query, variables) {
        throw new Error('Not implemented yet');
    }
    updateAll(typeName, filter) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented yet');
        });
    }
    deleteAll(typeName, filter) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented yet');
        });
    }
    uploadFile(typeName, buffer) {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('Not implemented yet');
        });
    }
    systemClient() {
        const url = `${this.serverEndpoint}/system`;
        return new graphql_request_1.GraphQLClient(url);
    }
    checkPatIsSet(fn) {
        if (this.pat == null) {
            throw new Error(`Graphcool must be instantiated with a pat when calling '${fn}': new Graphcool('project-id', {pat: 'pat'})`);
        }
    }
    tokenOrPat(options) {
        if (options && options.token) {
            return options.token;
        }
        else {
            return this.pat;
        }
    }
}
exports.default = Graphcool;
function fromEvent(event, options) {
    return new Graphcool(event.context.graphcool.projectId, Object.assign({ pat: event.context.graphcool.pat }, options));
}
exports.fromEvent = fromEvent;
//# sourceMappingURL=index.js.map