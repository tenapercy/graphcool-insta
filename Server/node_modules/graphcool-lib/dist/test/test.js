"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const _1 = require("../src/");
const fetchMock = require("fetch-mock");
ava_1.default('fromEvent', (t) => __awaiter(this, void 0, void 0, function* () {
    const graphcool = _1.fromEvent(testEvent);
    t.is(graphcool.serverEndpoint, 'https://api.graph.cool');
    t.is(graphcool.pat, 'test-pat');
}));
ava_1.default('api', (t) => __awaiter(this, void 0, void 0, function* () {
    const graphcool = _1.fromEvent(testEvent);
    const api = graphcool.api('simple/v1');
    fetchMock.post(simpleApiEndpoint, { body: { data: { allCats: [{ id: 'cat-1' }] } }, headers: { 'Content-Type': 'application/json' } });
    const response = yield api.request('{allCats{id}}');
    t.is(fetchMock.lastOptions().headers.Authorization, `Bearer ${testEvent.context.graphcool.pat}`);
    t.deepEqual(response, { allCats: [{ id: 'cat-1' }] });
    const apiWithCustomToken = graphcool.api('simple/v1', { token: 'custom-token' });
    yield apiWithCustomToken.request('{allCats{id}}');
    t.is(fetchMock.lastOptions().headers.Authorization, `Bearer custom-token`);
}));
ava_1.default('generateAuthToken', (t) => __awaiter(this, void 0, void 0, function* () {
    const graphcool = _1.fromEvent(testEvent);
    fetchMock.post(systemApiEndpoint, { body: { data: { generateUserToken: { token: 'test-token' } } }, headers: { 'Content-Type': 'application/json' } });
    const response = yield graphcool.generateAuthToken('test-node-id', 'TestType');
    t.is(response, 'test-token');
}));
const testEvent = {
    data: {
        boolean: true,
        int: 7
    },
    context: {
        request: {
            sourceIp: 'test-ip',
            headers: null,
            httpMethod: 'post'
        },
        graphcool: {
            pat: "test-pat",
            projectId: 'test-project-id',
            alias: 'test-alias'
        },
        environment: null,
        auth: {
            nodeId: 'test-node-id',
            typeName: 'test-type',
            token: 'test-token'
        },
        sessionCache: null
    }
};
const simpleApiEndpoint = 'https://api.graph.cool/simple/v1/test-project-id';
const systemApiEndpoint = 'https://api.graph.cool/system';
//# sourceMappingURL=test.js.map